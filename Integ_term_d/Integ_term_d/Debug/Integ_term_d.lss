
Integ_term_d.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000003a0  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000436  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e62  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cb  00000000  00000000  0000138e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000612  00000000  00000000  00001a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  0000206c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000459  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000074f  00000000  00000000  00002601  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002d50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 94 01 	call	0x328	; 0x328 <main>
  7a:	0c 94 ce 01 	jmp	0x39c	; 0x39c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
	}
}

void lcd_set_cursor(uint8_t row, uint8_t col) {
	uint8_t address = (row == 0 ? 0x80 : 0xC0) + col; // Calculate address
	lcd_cmd(address); // Send command to set cursor
  82:	95 b3       	in	r25, 0x15	; 21
  84:	9f 77       	andi	r25, 0x7F	; 127
  86:	95 bb       	out	0x15, r25	; 21
  88:	82 bb       	out	0x12, r24	; 18
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	85 bb       	out	0x15, r24	; 21
  90:	00 c0       	rjmp	.+0      	; 0x92 <lcd_cmd+0x10>
  92:	00 c0       	rjmp	.+0      	; 0x94 <lcd_cmd+0x12>
  94:	00 00       	nop
  96:	85 b3       	in	r24, 0x15	; 21
  98:	8f 7b       	andi	r24, 0xBF	; 191
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	83 ef       	ldi	r24, 0xF3	; 243
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_cmd+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcd_cmd+0x24>
  a6:	00 00       	nop
  a8:	08 95       	ret

000000aa <lcd_init>:
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	81 bb       	out	0x11, r24	; 17
  ae:	84 b3       	in	r24, 0x14	; 20
  b0:	80 6c       	ori	r24, 0xC0	; 192
  b2:	84 bb       	out	0x14, r24	; 20
  b4:	87 ea       	ldi	r24, 0xA7	; 167
  b6:	91 e6       	ldi	r25, 0x61	; 97
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_init+0xe>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <lcd_init+0x14>
  be:	00 00       	nop
  c0:	80 e3       	ldi	r24, 0x30	; 48
  c2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  c6:	80 e3       	ldi	r24, 0x30	; 48
  c8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  cc:	80 e3       	ldi	r24, 0x30	; 48
  ce:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  d2:	88 e3       	ldi	r24, 0x38	; 56
  d4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  d8:	8e e0       	ldi	r24, 0x0E	; 14
  da:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  ea:	08 95       	ret

000000ec <lcd_data>:
  ec:	95 b3       	in	r25, 0x15	; 21
  ee:	90 68       	ori	r25, 0x80	; 128
  f0:	95 bb       	out	0x15, r25	; 21
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_data+0x10>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_data+0x12>
  fe:	00 00       	nop
 100:	85 b3       	in	r24, 0x15	; 21
 102:	8f 7b       	andi	r24, 0xBF	; 191
 104:	85 bb       	out	0x15, r24	; 21
 106:	83 ef       	ldi	r24, 0xF3	; 243
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_data+0x1e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_data+0x24>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <lcd_print>:
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
 11a:	03 c0       	rjmp	.+6      	; 0x122 <lcd_print+0xe>
 11c:	21 96       	adiw	r28, 0x01	; 1
 11e:	0e 94 76 00 	call	0xec	; 0xec <lcd_data>
 122:	88 81       	ld	r24, Y
 124:	81 11       	cpse	r24, r1
 126:	fa cf       	rjmp	.-12     	; 0x11c <lcd_print+0x8>
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <int_to_string_fixed>:
}

void int_to_string_fixed(char* buffer, int value, uint8_t width) {
 12e:	fc 01       	movw	r30, r24
 130:	cb 01       	movw	r24, r22
	if (value < 0) {
 132:	99 23       	and	r25, r25
 134:	3c f4       	brge	.+14     	; 0x144 <int_to_string_fixed+0x16>
		*buffer++ = '-'; // Add minus sign for negative values
 136:	2d e2       	ldi	r18, 0x2D	; 45
 138:	20 83       	st	Z, r18
		value = -value;
 13a:	91 95       	neg	r25
 13c:	81 95       	neg	r24
 13e:	91 09       	sbc	r25, r1
		width--;
 140:	41 50       	subi	r20, 0x01	; 1
	lcd_cmd(address); // Send command to set cursor
}

void int_to_string_fixed(char* buffer, int value, uint8_t width) {
	if (value < 0) {
		*buffer++ = '-'; // Add minus sign for negative values
 142:	31 96       	adiw	r30, 0x01	; 1
		value = -value;
		width--;
	}
	
	buffer += width; // Move to the end of the buffer
 144:	24 2f       	mov	r18, r20
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	df 01       	movw	r26, r30
 14a:	a2 0f       	add	r26, r18
 14c:	b3 1f       	adc	r27, r19
	*buffer-- = '\0'; // Null-terminate the string
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	31 09       	sbc	r19, r1
 152:	e2 0f       	add	r30, r18
 154:	f3 1f       	adc	r31, r19
 156:	1c 92       	st	X, r1
	
	for (int i = 0; i < width; i++) {
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	12 c0       	rjmp	.+36     	; 0x182 <int_to_string_fixed+0x54>
		if (value > 0) {
 15e:	18 16       	cp	r1, r24
 160:	19 06       	cpc	r1, r25
 162:	54 f4       	brge	.+20     	; 0x178 <int_to_string_fixed+0x4a>
			*buffer-- = (value % 10) + '0'; // Convert digit to character
 164:	6a e0       	ldi	r22, 0x0A	; 10
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	0e 94 a6 01 	call	0x34c	; 0x34c <__divmodhi4>
 16c:	80 5d       	subi	r24, 0xD0	; 208
 16e:	80 83       	st	Z, r24
			value /= 10;
 170:	86 2f       	mov	r24, r22
 172:	97 2f       	mov	r25, r23
	buffer += width; // Move to the end of the buffer
	*buffer-- = '\0'; // Null-terminate the string
	
	for (int i = 0; i < width; i++) {
		if (value > 0) {
			*buffer-- = (value % 10) + '0'; // Convert digit to character
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	03 c0       	rjmp	.+6      	; 0x17e <int_to_string_fixed+0x50>
			value /= 10;
			} else {
			*buffer-- = '0'; // Fill remaining width with zeros
 178:	50 e3       	ldi	r21, 0x30	; 48
 17a:	50 83       	st	Z, r21
 17c:	31 97       	sbiw	r30, 0x01	; 1
	}
	
	buffer += width; // Move to the end of the buffer
	*buffer-- = '\0'; // Null-terminate the string
	
	for (int i = 0; i < width; i++) {
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	64 2f       	mov	r22, r20
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	26 17       	cp	r18, r22
 188:	37 07       	cpc	r19, r23
 18a:	4c f3       	brlt	.-46     	; 0x15e <int_to_string_fixed+0x30>
			value /= 10;
			} else {
			*buffer-- = '0'; // Fill remaining width with zeros
		}
	}
}
 18c:	08 95       	ret

0000018e <display_temperatures_test>:

void display_temperatures_test(int temperature, int unused) {
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	60 97       	sbiw	r28, 0x10	; 16
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
 1a6:	8c 01       	movw	r16, r24
	char buffer[16];
	
	lcd_cmd(0x80 | 0x00);  // Move cursor to the first line
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	if (temperature >= -55 && temperature <= 125) {
 1ae:	c8 01       	movw	r24, r16
 1b0:	c7 96       	adiw	r24, 0x37	; 55
 1b2:	85 3b       	cpi	r24, 0xB5	; 181
 1b4:	91 05       	cpc	r25, r1
 1b6:	98 f4       	brcc	.+38     	; 0x1de <display_temperatures_test+0x50>
		int_to_string_fixed(buffer, temperature, 4); // Convert temperature to string
 1b8:	44 e0       	ldi	r20, 0x04	; 4
 1ba:	b8 01       	movw	r22, r16
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	0e 94 97 00 	call	0x12e	; 0x12e <int_to_string_fixed>
		lcd_print("Temp:"); 
 1c4:	80 e6       	ldi	r24, 0x60	; 96
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
		lcd_print(buffer); 
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
		lcd_print("_C"); 
 1d4:	86 e6       	ldi	r24, 0x66	; 102
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <display_temperatures_test+0x58>
		} else {
		lcd_print("Temp:Error"); 
 1de:	89 e6       	ldi	r24, 0x69	; 105
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
	}
}
 1e6:	60 96       	adiw	r28, 0x10	; 16
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	08 95       	ret

000001fc <ds18b20_reset>:

uint8_t ds18b20_reset(void) {
	uint8_t i;
	DS18B20_DDR |= (1 << DS18B20_PIN); // Set as output
 1fc:	8a b3       	in	r24, 0x1a	; 26
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	80 ea       	ldi	r24, 0xA0	; 160
 204:	8a 95       	dec	r24
 206:	f1 f7       	brne	.-4      	; 0x204 <ds18b20_reset+0x8>
	_delay_us(480); // Pull low for 480 us
	DS18B20_DDR &= ~(1 << DS18B20_PIN); // Set as input
 208:	8a b3       	in	r24, 0x1a	; 26
 20a:	8e 7f       	andi	r24, 0xFE	; 254
 20c:	8a bb       	out	0x1a, r24	; 26
 20e:	94 e1       	ldi	r25, 0x14	; 20
 210:	9a 95       	dec	r25
 212:	f1 f7       	brne	.-4      	; 0x210 <ds18b20_reset+0x14>
	_delay_us(60); // Wait for 60 us
	i = (DS18B20_PINR & (1 << DS18B20_PIN)); // Read the pin state
 214:	89 b3       	in	r24, 0x19	; 25
 216:	81 70       	andi	r24, 0x01	; 1
 218:	9c e8       	ldi	r25, 0x8C	; 140
 21a:	9a 95       	dec	r25
 21c:	f1 f7       	brne	.-4      	; 0x21a <ds18b20_reset+0x1e>
	_delay_us(420); // Wait for 420 us
	return i; // Return the pin state (0 if presence pulse detected)
}
 21e:	08 95       	ret

00000220 <ds18b20_write_bit>:

void ds18b20_write_bit(uint8_t bit) {
	DS18B20_DDR |= (1 << DS18B20_PIN); // Set as output
 220:	9a b3       	in	r25, 0x1a	; 26
 222:	91 60       	ori	r25, 0x01	; 1
 224:	9a bb       	out	0x1a, r25	; 26
 226:	00 00       	nop
	_delay_us(1); // Wait for 1 us
	if (bit) DS18B20_DDR &= ~(1 << DS18B20_PIN); // Set as input if bit is 1
 228:	88 23       	and	r24, r24
 22a:	19 f0       	breq	.+6      	; 0x232 <ds18b20_write_bit+0x12>
 22c:	8a b3       	in	r24, 0x1a	; 26
 22e:	8e 7f       	andi	r24, 0xFE	; 254
 230:	8a bb       	out	0x1a, r24	; 26
 232:	84 e1       	ldi	r24, 0x14	; 20
 234:	8a 95       	dec	r24
 236:	f1 f7       	brne	.-4      	; 0x234 <ds18b20_write_bit+0x14>
	_delay_us(60); // Wait for 60 us
	DS18B20_DDR &= ~(1 << DS18B20_PIN); // Set as input
 238:	8a b3       	in	r24, 0x1a	; 26
 23a:	8e 7f       	andi	r24, 0xFE	; 254
 23c:	8a bb       	out	0x1a, r24	; 26
 23e:	08 95       	ret

00000240 <ds18b20_read_bit>:
}

uint8_t ds18b20_read_bit(void) {
	uint8_t bit = 0;
	DS18B20_DDR |= (1 << DS18B20_PIN); // Set as output
 240:	8a b3       	in	r24, 0x1a	; 26
 242:	81 60       	ori	r24, 0x01	; 1
 244:	8a bb       	out	0x1a, r24	; 26
 246:	00 00       	nop
	_delay_us(1); // Wait for 1 us
	DS18B20_DDR &= ~(1 << DS18B20_PIN); // Set as input
 248:	8a b3       	in	r24, 0x1a	; 26
 24a:	8e 7f       	andi	r24, 0xFE	; 254
 24c:	8a bb       	out	0x1a, r24	; 26
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	8a 95       	dec	r24
 252:	f1 f7       	brne	.-4      	; 0x250 <ds18b20_read_bit+0x10>
 254:	00 c0       	rjmp	.+0      	; 0x256 <ds18b20_read_bit+0x16>
	_delay_us(14); // Wait for 14 us
	if (DS18B20_PINR & (1 << DS18B20_PIN)) bit = 1; // Read the pin state
 256:	c8 99       	sbic	0x19, 0	; 25
 258:	02 c0       	rjmp	.+4      	; 0x25e <ds18b20_read_bit+0x1e>
	_delay_us(60); // Wait for 60 us
	DS18B20_DDR &= ~(1 << DS18B20_PIN); // Set as input
}

uint8_t ds18b20_read_bit(void) {
	uint8_t bit = 0;
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	01 c0       	rjmp	.+2      	; 0x260 <ds18b20_read_bit+0x20>
	DS18B20_DDR |= (1 << DS18B20_PIN); // Set as output
	_delay_us(1); // Wait for 1 us
	DS18B20_DDR &= ~(1 << DS18B20_PIN); // Set as input
	_delay_us(14); // Wait for 14 us
	if (DS18B20_PINR & (1 << DS18B20_PIN)) bit = 1; // Read the pin state
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	9f e0       	ldi	r25, 0x0F	; 15
 262:	9a 95       	dec	r25
 264:	f1 f7       	brne	.-4      	; 0x262 <ds18b20_read_bit+0x22>
	_delay_us(45); // Wait for 45 us
	return bit; // Return the bit value
}
 266:	08 95       	ret

00000268 <ds18b20_write_byte>:

void ds18b20_write_byte(uint8_t byte) {
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	d8 2f       	mov	r29, r24
	for (uint8_t i = 0; i < 8; i++) {
 26e:	c0 e0       	ldi	r28, 0x00	; 0
 270:	06 c0       	rjmp	.+12     	; 0x27e <ds18b20_write_byte+0x16>
		ds18b20_write_bit(byte & 1); // Write each bit of the byte
 272:	8d 2f       	mov	r24, r29
 274:	81 70       	andi	r24, 0x01	; 1
 276:	0e 94 10 01 	call	0x220	; 0x220 <ds18b20_write_bit>
		byte >>= 1; // Shift the byte to get the next bit
 27a:	d6 95       	lsr	r29
	_delay_us(45); // Wait for 45 us
	return bit; // Return the bit value
}

void ds18b20_write_byte(uint8_t byte) {
	for (uint8_t i = 0; i < 8; i++) {
 27c:	cf 5f       	subi	r28, 0xFF	; 255
 27e:	c8 30       	cpi	r28, 0x08	; 8
 280:	c0 f3       	brcs	.-16     	; 0x272 <ds18b20_write_byte+0xa>
		ds18b20_write_bit(byte & 1); // Write each bit of the byte
		byte >>= 1; // Shift the byte to get the next bit
	}
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <ds18b20_read_byte>:

uint8_t ds18b20_read_byte(void) {
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
	uint8_t byte = 0;
	for (uint8_t i = 0; i < 8; i++) {
 28c:	c0 e0       	ldi	r28, 0x00	; 0
		byte >>= 1; // Shift the byte to get the next bit
	}
}

uint8_t ds18b20_read_byte(void) {
	uint8_t byte = 0;
 28e:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
 290:	06 c0       	rjmp	.+12     	; 0x29e <ds18b20_read_byte+0x16>
		byte >>= 1; // Shift the byte to make space for the next bit
 292:	d6 95       	lsr	r29
		if (ds18b20_read_bit()) byte |= 0x80; // Read each bit and set it in the byte
 294:	0e 94 20 01 	call	0x240	; 0x240 <ds18b20_read_bit>
 298:	81 11       	cpse	r24, r1
 29a:	d0 68       	ori	r29, 0x80	; 128
	}
}

uint8_t ds18b20_read_byte(void) {
	uint8_t byte = 0;
	for (uint8_t i = 0; i < 8; i++) {
 29c:	cf 5f       	subi	r28, 0xFF	; 255
 29e:	c8 30       	cpi	r28, 0x08	; 8
 2a0:	c0 f3       	brcs	.-16     	; 0x292 <ds18b20_read_byte+0xa>
		byte >>= 1; // Shift the byte to make space for the next bit
		if (ds18b20_read_bit()) byte |= 0x80; // Read each bit and set it in the byte
	}
	return byte; // Return the byte
}
 2a2:	8d 2f       	mov	r24, r29
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <ds18b20_get_temp>:

int ds18b20_get_temp(void) {
 2aa:	cf 93       	push	r28
	uint8_t temp_lsb, temp_msb;
	int16_t temp;

	if (ds18b20_reset()) { // Reset the DS18B20 sensor and check for presence
 2ac:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ds18b20_reset>
 2b0:	88 23       	and	r24, r24
 2b2:	39 f0       	breq	.+14     	; 0x2c2 <ds18b20_get_temp+0x18>
		lcd_print("DS18B20 Error"); // Print error message if no presence pulse
 2b4:	84 e7       	ldi	r24, 0x74	; 116
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
		return -1; // Return error code
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	9f ef       	ldi	r25, 0xFF	; 255
 2c0:	31 c0       	rjmp	.+98     	; 0x324 <ds18b20_get_temp+0x7a>
	}
	ds18b20_write_byte(DS18B20_CMD_SKIPROM); // Skip ROM command
 2c2:	8c ec       	ldi	r24, 0xCC	; 204
 2c4:	0e 94 34 01 	call	0x268	; 0x268 <ds18b20_write_byte>
	ds18b20_write_byte(DS18B20_CMD_CONVERTTEMP); // Start temperature conversion
 2c8:	84 e4       	ldi	r24, 0x44	; 68
 2ca:	0e 94 34 01 	call	0x268	; 0x268 <ds18b20_write_byte>
	while (!ds18b20_read_bit()); // Wait for conversion to complete
 2ce:	0e 94 20 01 	call	0x240	; 0x240 <ds18b20_read_bit>
 2d2:	88 23       	and	r24, r24
 2d4:	e1 f3       	breq	.-8      	; 0x2ce <ds18b20_get_temp+0x24>

	if (ds18b20_reset()) { // Reset the DS18B20 sensor and check for presence
 2d6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ds18b20_reset>
 2da:	88 23       	and	r24, r24
 2dc:	39 f0       	breq	.+14     	; 0x2ec <ds18b20_get_temp+0x42>
		lcd_print("DS18B20 Error"); // Print error message if no presence pulse
 2de:	84 e7       	ldi	r24, 0x74	; 116
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_print>
		return -1; // Return error code
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	9f ef       	ldi	r25, 0xFF	; 255
 2ea:	1c c0       	rjmp	.+56     	; 0x324 <ds18b20_get_temp+0x7a>
	}
	ds18b20_write_byte(DS18B20_CMD_SKIPROM); // Skip ROM command
 2ec:	8c ec       	ldi	r24, 0xCC	; 204
 2ee:	0e 94 34 01 	call	0x268	; 0x268 <ds18b20_write_byte>
	ds18b20_write_byte(DS18B20_CMD_RSCRATCHPAD); // Read scratchpad command
 2f2:	8e eb       	ldi	r24, 0xBE	; 190
 2f4:	0e 94 34 01 	call	0x268	; 0x268 <ds18b20_write_byte>
	
	temp_lsb = ds18b20_read_byte(); // Read LSB of temperature
 2f8:	0e 94 44 01 	call	0x288	; 0x288 <ds18b20_read_byte>
 2fc:	c8 2f       	mov	r28, r24
	temp_msb = ds18b20_read_byte(); // Read MSB of temperature
 2fe:	0e 94 44 01 	call	0x288	; 0x288 <ds18b20_read_byte>
	
	temp = (temp_msb << 8) | temp_lsb; // Combine MSB and LSB
 302:	28 2f       	mov	r18, r24
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	32 2f       	mov	r19, r18
 308:	22 27       	eor	r18, r18
 30a:	2c 2b       	or	r18, r28
	return (int)(temp / 16); // Convert to Celsius and return
 30c:	c9 01       	movw	r24, r18
 30e:	99 23       	and	r25, r25
 310:	0c f4       	brge	.+2      	; 0x314 <ds18b20_get_temp+0x6a>
 312:	0f 96       	adiw	r24, 0x0f	; 15
 314:	95 95       	asr	r25
 316:	87 95       	ror	r24
 318:	95 95       	asr	r25
 31a:	87 95       	ror	r24
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	95 95       	asr	r25
 322:	87 95       	ror	r24
}
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <main>:
int ds18b20_get_temp(void); // Gets the temperature from the DS18B20 sensor


int main(void)
{
	lcd_init(); 
 328:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_init>
	
	while (1)
	{
		int temperature = ds18b20_get_temp(); 
 32c:	0e 94 55 01 	call	0x2aa	; 0x2aa <ds18b20_get_temp>
		display_temperatures_test(temperature, 0); 
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	0e 94 c7 00 	call	0x18e	; 0x18e <display_temperatures_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 338:	2f e3       	ldi	r18, 0x3F	; 63
 33a:	8d e0       	ldi	r24, 0x0D	; 13
 33c:	93 e0       	ldi	r25, 0x03	; 3
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <main+0x16>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0x20>
 348:	00 00       	nop
 34a:	f0 cf       	rjmp	.-32     	; 0x32c <main+0x4>

0000034c <__divmodhi4>:
 34c:	97 fb       	bst	r25, 7
 34e:	07 2e       	mov	r0, r23
 350:	16 f4       	brtc	.+4      	; 0x356 <__divmodhi4+0xa>
 352:	00 94       	com	r0
 354:	07 d0       	rcall	.+14     	; 0x364 <__divmodhi4_neg1>
 356:	77 fd       	sbrc	r23, 7
 358:	09 d0       	rcall	.+18     	; 0x36c <__divmodhi4_neg2>
 35a:	0e 94 ba 01 	call	0x374	; 0x374 <__udivmodhi4>
 35e:	07 fc       	sbrc	r0, 7
 360:	05 d0       	rcall	.+10     	; 0x36c <__divmodhi4_neg2>
 362:	3e f4       	brtc	.+14     	; 0x372 <__divmodhi4_exit>

00000364 <__divmodhi4_neg1>:
 364:	90 95       	com	r25
 366:	81 95       	neg	r24
 368:	9f 4f       	sbci	r25, 0xFF	; 255
 36a:	08 95       	ret

0000036c <__divmodhi4_neg2>:
 36c:	70 95       	com	r23
 36e:	61 95       	neg	r22
 370:	7f 4f       	sbci	r23, 0xFF	; 255

00000372 <__divmodhi4_exit>:
 372:	08 95       	ret

00000374 <__udivmodhi4>:
 374:	aa 1b       	sub	r26, r26
 376:	bb 1b       	sub	r27, r27
 378:	51 e1       	ldi	r21, 0x11	; 17
 37a:	07 c0       	rjmp	.+14     	; 0x38a <__udivmodhi4_ep>

0000037c <__udivmodhi4_loop>:
 37c:	aa 1f       	adc	r26, r26
 37e:	bb 1f       	adc	r27, r27
 380:	a6 17       	cp	r26, r22
 382:	b7 07       	cpc	r27, r23
 384:	10 f0       	brcs	.+4      	; 0x38a <__udivmodhi4_ep>
 386:	a6 1b       	sub	r26, r22
 388:	b7 0b       	sbc	r27, r23

0000038a <__udivmodhi4_ep>:
 38a:	88 1f       	adc	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	5a 95       	dec	r21
 390:	a9 f7       	brne	.-22     	; 0x37c <__udivmodhi4_loop>
 392:	80 95       	com	r24
 394:	90 95       	com	r25
 396:	bc 01       	movw	r22, r24
 398:	cd 01       	movw	r24, r26
 39a:	08 95       	ret

0000039c <_exit>:
 39c:	f8 94       	cli

0000039e <__stop_program>:
 39e:	ff cf       	rjmp	.-2      	; 0x39e <__stop_program>
